// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Data.Entity.Infrastructure;
using System.Linq.Expressions;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace DDona.NewReport.Infra
{
    // Produto
    public class ProdutoConfiguration : EntityTypeConfiguration<Produto>
    {
        public ProdutoConfiguration()
            : this("dbo")
        {
        }
 
        public ProdutoConfiguration(string schema)
        {
            ToTable(schema + ".Produto");
            HasKey(x => new { x.Id, x.LojaId });

            Property(x => x.Id).HasColumnName("Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.LojaId).HasColumnName("LojaId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Descricao).HasColumnName("Descricao").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(80);
            Property(x => x.PrecoCompra).HasColumnName("PrecoCompra").IsRequired().HasColumnType("decimal").HasPrecision(10,3);
            Property(x => x.PrecoVenda).HasColumnName("PrecoVenda").IsRequired().HasColumnType("decimal").HasPrecision(10,3);
            Property(x => x.MarcaId).HasColumnName("MarcaId").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Loja).WithMany(b => b.Produto).HasForeignKey(c => c.LojaId); // FK_Produto_Loja
            HasRequired(a => a.Marca).WithMany(b => b.Produto).HasForeignKey(c => c.MarcaId); // FK_Produto_Marca
        }
    }

}
// </auto-generated>
